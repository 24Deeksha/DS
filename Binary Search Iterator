/**
 * Definition for a binary tree node. */
  public class TreeNode {
      int val;
      TreeNode left;
      TreeNode right;
      TreeNode() {}
      TreeNode(int val) { this.val = val; }
      TreeNode(int val, TreeNode left, TreeNode right) {
          this.val = val;
          this.left = left;
          this.right = right;
      }
  }
 
class BSTIterator {

    LinkedList<Integer> iNodeList = new LinkedList<Integer>();
    
    ListIterator iterator;
    
    public void traverseInodeList(TreeNode root){
        if(root == null){
            return;
        }
        
        if(root.left == null){
            iNodeList.add(root.val);
        }
        
        else if(root.left != null){
            traverseInodeList(root.left);
            iNodeList.add(root.val);
        }
        if(root.right != null){
            traverseInodeList(root.right);
        }
    }
    
    public BSTIterator(TreeNode root) {
        traverseInodeList(root);
        iterator = iNodeList.listIterator();
        //print();
    }
    
    public void print(){
        ListIterator i = iNodeList.listIterator();
        while(i.hasNext()){
            System.out.println(i.next());
        }
    }
    
    /** @return the next smallest number */
    public int next() {
       // System.out.println("Inside next()");
       int value = 0;
        if(iterator.hasNext()){
            value = (Integer)iterator.next();
        }
        //System.out.println("value={}" + value);
        return value;
    }
    
    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        //System.out.println("Inside hasNext()");
        return iterator.hasNext();
    }
}

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator obj = new BSTIterator(root);
 * int param_1 = obj.next();
 * boolean param_2 = obj.hasNext();
 */
