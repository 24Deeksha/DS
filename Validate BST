/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    List<Integer> iNodeList = new ArrayList<Integer>();

    public void traverseInodeList(TreeNode root){
        if(root == null){
            return;
        }
        
        if(root.left == null){
            iNodeList.add(root.val);
        }
        
        else if(root.left != null){
            traverseInodeList(root.left);
            iNodeList.add(root.val);
        }
        if(root.right != null){
            traverseInodeList(root.right);
        }
    }

     boolean isSorted(List<Integer> list, int index){
        if(index < 2 ){
            System.out.println("list is sorted");
            return true;
        } else if( list.get(index-2).compareTo(list.get(index-1)) >= 0){
            System.out.println("List is not sorted");
            return false;
        } else{
            return isSorted(list, index-1);
        }
    }
    
      
    public boolean isValidBST(TreeNode root) {
        traverseInodeList(root);
        return isSorted(iNodeList, iNodeList.size());
    }
}
